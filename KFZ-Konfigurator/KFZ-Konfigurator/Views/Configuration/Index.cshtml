@using KFZ_Konfigurator.Helper;
@using KFZ_Konfigurator.ViewModels;
@model KFZ_Konfigurator.ViewModels.ConfigurationPageViewModel

@{
    Layout = "~/Views/Shared/_Layout.cshtml";

    string viewKind = Constants.ConfigurationViewKind.ModelSelection;
    Type modelType = Model.PartialViewModel.GetType();
    if (modelType == typeof(EngineSettingsPageViewModel))
    {
        viewKind = Constants.ConfigurationViewKind.EngineSettings;
    }
    else if (modelType == typeof(AccessoriesPageViewModel))
    {
        viewKind = Constants.ConfigurationViewKind.Accessories;
    }
    else if (modelType == typeof(ExteriorPageViewModel))
    {
        viewKind = Constants.ConfigurationViewKind.Exterior;
    }
    else if (modelType == typeof(ConfigurationOverviewPageViewModel))
    {
        viewKind = Constants.ConfigurationViewKind.Overview;
    }

    var carModelId = (viewKind == Constants.ConfigurationViewKind.ModelSelection ? -1 : SessionData.ActiveConfiguration.CarModel?.Id ?? -1);
}

<div id="@Constants.PartialView.PartialContentId">
    @Html.Partial(Model.PartialViewName, Model.PartialViewModel)
</div>

@section ConfigurationHeader {
    <div id="configurationHeader">
        <div class="bg-light">
            <div class="container text-overlap-container">
                <img src="~/Resources/Images/audiA4Side.png" class="img-fluid" />
                <h3 class="overlap-top-left" data-bind="text: modelName"></h3>
            </div>
        </div>
        <div class="navbar bg-dark navbar-dark navbar-expand">
            <div class="container" data-bind="css: { invisible: currentViewKind() === '@Constants.ConfigurationViewKind.ModelSelection' }">
                <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#configurationNavbarToggleContent">
                    <span class="navbar-toggler-icon"></span>
                </button>
                <div class="navbar-collapse collapse" id="configurationNavbarToggleContent">
                    <div class="navbar-nav">
                        <a class="nav-item nav-link"
                           data-bind="click: (d, e) => linkClick(links.engineSettingsLink, links.engineSettingsLinkPartial, '@Constants.ConfigurationViewKind.EngineSettings', e),
                                        attr: { href: links.engineSettingsLink, 'data-href-partial': links.engineSettingsLinkPartial },
                                        css: { active: currentViewKind() === '@Constants.ConfigurationViewKind.EngineSettings' }">
                            @LocalizationManager.Localize("ConfigurationLayout_EngineSettings_Button")
                        </a>
                        <a class="nav-item nav-link"
                           data-bind="click: (d, e) => linkClick(links.accessoriesLink, links.accessoriesLinkPartial, '@Constants.ConfigurationViewKind.Accessories', e),
                                        attr: { href: links.accessoriesLink, 'data-href-partial': links.accessoriesLinkPartial },
                                        css: { active: currentViewKind() === '@Constants.ConfigurationViewKind.Accessories' }">
                            @LocalizationManager.Localize("ConfigurationLayout_Accessories_Button")
                        </a>
                        <a class="nav-item nav-link"
                           data-bind="click: (d, e) => linkClick(links.exteriorLink, links.exteriorLinkPartial, '@Constants.ConfigurationViewKind.Exterior', e),
                                        attr: { href: links.exteriorLink, 'data-href-partial': links.exteriorLinkPartial },
                                        css: { active: currentViewKind() === '@Constants.ConfigurationViewKind.Exterior' }">
                            @LocalizationManager.Localize("ConfigurationLayout_Exterior_Button")
                        </a>
                    </div>
                </div>
            </div>
        </div>
    </div>
}

@section CartOverview {
    <div id="cartOverview" class="card rounded-0 container" data-bind="attr: { hidden: currentViewKind() === '@Constants.ConfigurationViewKind.ModelSelection'}">
        <div class="card-body">
            <a href="@Url.RouteUrl(Constants.Routes.ModelOverview)" title="@LocalizationManager.Localize("ConfigurationLayout_GoToModelOverview")">
                <h5 class="card-title" data-bind="text: modelName"></h5>
            </a>
            <div class="card-text">
                <span data-bind="text: selectedAccessories().length"></span>
                <strong data-bind="if: selectedAccessories().length > 0">@LocalizationManager.Localize("ConfigurationLayout_Overview_Extras_Header"):</strong>
                <div data-bind="foreach: selectedAccessories">
                    <div data-bind="text: name"></div>
                </div>
                <div>
                    <strong>@LocalizationManager.Localize("ConfigurationLayout_Overview_Paint_Header")</strong>: <span data-bind="text: selectedPaint().name"></span>
                </div>
                <div>
                    <strong>@LocalizationManager.Localize("ConfigurationLayout_Overview_Rims_Header")</strong>: <span data-bind="text: selectedRims().size"></span>
                </div>
                <div class="mt-3">
                    <strong>@LocalizationManager.Localize("ConfigurationLayout_BasePrice_Label")</strong>: <span data-bind="text: formatCurrency(basePrice())"></span>
                </div>
                <div>
                    <strong>@LocalizationManager.Localize("ConfigurationLayout_ExtrasPrice_Label")</strong>: <span data-bind="text: formatCurrency(extrasPrice())"></span>
                </div>
                <div>
                    <strong>@LocalizationManager.Localize("ConfigurationLayout_Price_Label")</strong>: <span data-bind="text: formatCurrency(fullPrice())"></span>
                </div>
            </div>
        </div>
        <a class="btn btn-info row"
           data-bind="click: (d, e) => linkClick(links.overviewLink, links.overviewLinkPartial, '@Constants.ConfigurationViewKind.Overview', e, false),
                        attr: { href: links.overviewLink, 'data-href-partial': links.overviewLinkPartial },
                        if: currentViewKind() !== '@Constants.ConfigurationViewKind.ModelSelection'">
            @LocalizationManager.Localize("ConfigurationLayout_GoToOverview")
        </a>
    </div>
}

@section scripts {
    <script type="text/javascript" src="@Url.Content("/Scripts/app/KoExtensions.js")"></script>
    <script type="text/javascript" src="@Url.Content("/Scripts/app/Helper.js")"></script>
    <script type="text/javascript" src="@Url.Content("/Scripts/app/ConfigurationOverviewViewModel.js")"></script>
    <script type="text/javascript" src="@Url.Content("/Scripts/app/ConfigurationViewModel.js")"></script>
    <script type="text/javascript">
        /** @@enum {string} */
        let VIEW_KIND = {
            ModelSelection: '@Constants.ConfigurationViewKind.ModelSelection',
            EngineSettings: '@Constants.ConfigurationViewKind.EngineSettings',
            Accessories: '@Constants.ConfigurationViewKind.Accessories',
            Exterior: '@Constants.ConfigurationViewKind.Exterior',
        };

        /** @@type {{viewModel: ConfigurationViewModel, replaceConfigurationContent: Function, applyViewModelToPartialContent: Function}} */
        let configurationView = {};
        (function () {
            let partialContent = document.getElementById('@Constants.PartialView.PartialContentId');
            let configurationHeader = document.getElementById('configurationHeader');
            let cartOverview = document.getElementById('cartOverview');

            configurationView.viewModel = new ConfigurationViewModel('@viewKind');
            configurationView.replaceConfigurationContent = function (data, url, viewKind, reapplyViewModelContext = true) {
                //update viewmodel
                let updateViewKind = () => {
                    //update the viewKind after the configuration view model has been loaded
                    //once the view kind changed, the cart view elements and the bindings will be loaded
                    console.debug('updating view kind: ' + viewKind);
                    configurationView.viewModel.currentViewKind(viewKind)

                    //first, replace the content
                    console.debug('replacing partial configuration content for url ' + url);
                    $('#@Constants.PartialView.PartialContentId').html(data.ViewContent);

                    let scriptElement = $('@Constants.PartialView.ScriptContentId');
                    console.debug('replacing scripts');
                    scriptElement.replaceWith(data.ScriptContent);

                    window.history.pushState('object or string', 'Title', url);
                }

                if (!configurationView.viewModel.isInitialized) {
                    loadConfigurationViewModel().done(() => {
                        updateViewKind();
                        //have to reapply the bindings either way if the configurationViewModel was just initialized
                        reapplyAllBindings();
                    });
                } else {
                    updateViewKind();
                    //second, reapply the view model binding, so that the data bindings are applied to the content
                    if (reapplyViewModelContext) {
                        configurationView.applyViewModelToPartialContent();
                    }
                }
            };
            configurationView.applyViewModelToPartialContent = function (data) {
                //when replacing the content, the bindings are not applied to the new content
                //we have to reapply the bindings (only to partial content) to make the new content work
                data = data || {};
                data.config = configurationView.viewModel;

                console.debug('applying view model to partial content');
                //console.log(data);
                ko.cleanNode.keepEvents(partialContent);
                ko.applyBindings(data, partialContent);
            };

            function loadConfigurationViewModel () {
                console.debug('loading configuration view model');
                return $.get('@Url.RouteUrl(Constants.Routes.GetConfigurationViewModel)', function (data) {
                    configurationView.viewModel.init({
                        engineSettings: data.EngineSettings,
                        accessories: data.Accessories,
                        paints: data.Paints,
                        rims: data.Rims,
                        modelName: data.ModelName,
                        replaceConfigurationContent: configurationView.replaceConfigurationContent,
                        links: {
                            engineSettingsLink: data.Links.EngineSettingsLink,
                            engineSettingsLinkPartial: data.Links.EngineSettingsLinkPartial,
                            accessoriesLink: data.Links.AccessoriesLink,
                            accessoriesLinkPartial: data.Links.AccessoriesLinkPartial,
                            exteriorLink: data.Links.ExteriorLink,
                            exteriorLinkPartial: data.Links.ExteriorLinkPartial,
                            overviewLink: data.Links.OverviewLink,
                            overviewLinkPartial: data.Links.OverviewLinkPartial,
                        }
                    });
                }).fail(function (error) {
                    console.error('configurationViewModel could not be loaded: ' + error.responseText + '(' + error.statusText + ')');
                });
            }

            function reapplyAllBindings() {
                ko.cleanNode(configurationHeader);
                ko.cleanNode(cartOverview);
                ko.cleanNode.keepEvents(partialContent);

                console.debug('applying configuration view model to document');
                ko.applyBindings(configurationView.viewModel, configurationHeader);
                ko.applyBindings(configurationView.viewModel, cartOverview);
                ko.applyBindings({ config: configurationView.viewModel }, partialContent);
            }

            if (@carModelId !== -1) {
                loadConfigurationViewModel();
            } else {
                reapplyAllBindings();
            }
        })();
    </script>
    @Html.Partial(Model.PartialViewName, Model.PartialViewModel, new ViewDataDictionary { { Constants.PartialView.RenderScripts, true } })
}
